#!/usr/bin/env sh

# flock on the script itself, this way we ensure that we "queue" the executions
# when sdp-driver calls the script.
if [ "${FLOCKER}" != "$0" ]
then
    exec env FLOCKER="$0" flock -x "$0" "$0" "$@"
else
    :
fi

# This script is executed by socat.
# It will get events from sdp-driver about DNS changes and it will
# configure dnsmasq to use the new settings requested by sdp-driver

decho () {
    echo "$(date +"%b %d %X") " "$@"
}

# NOTE: stdin reads from the socat socket.
DNSMASQ_CONF_FILE=/sdp-dnsmasq/dnsmasq.conf
DNSMASQ_APPGATE=/sdp-dnsmasq/dnsmasq.d/appgate.conf
DNSMASQ_APPGATE_NEW=/tmp/appgate.conf.new
DNSMASQ_APPGATE_BACKUP=/tmp/appgate.conf.bk
DNSMASQ_APPGATE_FAIL=/tmp/appgate.conf.fail
KUBE_DNS_FILE=/tmp/kube-dns

# This reuses later the first entry in the file since that entry
# points to the kube_dns service
if [ -f $KUBE_DNS_FILE ]; then
   KUBE_DNS_SERVICE="server=$(cat $KUBE_DNS_FILE)"
fi

# What does the AWKward AWK script?
#
# It matches 2 types of entries:
#   1. entries with `dns.server`:
#     1.1. if it contains `.default$` then it's a plain DNS server entry
#     1.2. else it's a match domain entry + DNS server entry
#   2. other entries (we assume it's a normal server entry)
#
# The script collects plain DNS servers and match domain DNS servers.

# NOT: plain DNS entries are ignored. Only match domains are supported.
match_domains () {
    servers="$1"
    domains="$2"
    printf "%s" "$domains" | awk -vSERVERS="$servers" \
        -vSERVER_ENTRIES="$SERVER_ENTRIES" \
        -e '
BEGIN {
  RS = ","
  lend = 0
  lens = split(SERVERS, servers, ",")
}
{
  if (match($0, "dns.server")) {
    # sdp-driver sent an entry with the form: dns.server.X.Y.Z.W.domain
    #    where X.Y.Z.W is the DNS to use to resolve hosts in domain
    if (match($0, ".default$")) {
        servers[++lens] = gensub(/dns.server\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).(.+)/, "\\1", "g")
    } else {
        domains[lend++] = gensub(/dns.server\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).(.+)/, "server=/\\2/\\1", "g")
        dns = gensub(/dns.server\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).(.+)/, "\\1", "g")
        servers_for_domains[dns] = 1
    }
  } else if (length() > 0) {
    # sdp-driver sent a plain domain so all the known servers should search hosts there
    for (s in servers) {
      domains[lend++] = "server=/" $1 "/" servers[s]
    }
  }
}
END {
  if (SERVER_ENTRIES) {
    for (s in servers) {
      if (! servers_for_domains[servers[s]]) {
        print("server=" servers[s])
      }
    }
  }
  for (d in domains) {
    print(domains[d])
  }
}'
}

read -r cli
decho "Got new DNS configuration from sdp-driver: $cli"
opt=${cli%% *}
reset=0
while [ -n "$opt" ]; do
    case ${opt%%=*} in
        --reset)
            reset=1
            echo "# sdp-dnsmasq config file" > $DNSMASQ_APPGATE_NEW
            if [ -f $KUBE_DNS_FILE ]; then
                KUBE_DNS_SERVICE="server=$(cat $KUBE_DNS_FILE)"
                echo "$KUBE_DNS_SERVICE" >> $DNSMASQ_APPGATE_NEW
            fi
            servers=""
            domains=""
            break
            ;;
        --servers)
            servers="${opt##*=}"
            ;;
        --domains)
            domains="${opt##*=}"
            ;;
        *)
            # ignore this
            ;;
    esac
    cli=${cli#* }
    opt=${cli%% *}
    if [ "$opt" = "$cli" ]; then
        cli=""
    fi
done

# Flag to know if we need to restart the service
restart=1

# No reset was required
if [ $reset = 0 ]; then
    if [ -z "$servers" ] && [ -z "$domains" ]; then
        decho "--servers not provided, doing nothing"
        exit 0
    fi

    decho "Setting new DNS configuration"
    echo "# sdp-dnsmasq config file" > $DNSMASQ_APPGATE_NEW
    if [ -f $KUBE_DNS_FILE ]; then
        KUBE_DNS_SERVICE="server=$(cat $KUBE_DNS_FILE)"
        echo "$KUBE_DNS_SERVICE" >> $DNSMASQ_APPGATE_NEW
    fi
    for i in $(match_domains "$servers" "$domains"); do
        echo "$i" >> $DNSMASQ_APPGATE_NEW
    done
    old_hash=$(sha256sum $DNSMASQ_APPGATE | awk '{print($1)}')
    new_hash=$(sha256sum $DNSMASQ_APPGATE_NEW | awk '{print($1)}')
    if [ "$old_hash" = "$new_hash" ]; then
        decho "Configuration file did not change, no need to restart the service"
        restart=0
    fi
fi

if [ $restart -eq 1 ]; then
    decho "Applying new DNS configuration"
    # Backup current configuration
    cp $DNSMASQ_APPGATE $DNSMASQ_APPGATE_BACKUP
    # Make new to be current
    cp $DNSMASQ_APPGATE_NEW $DNSMASQ_APPGATE
    # Basic check for the confic
    /usr/sbin/dnsmasq -C $DNSMASQ_CONF_FILE --test || {
        decho "Syntax errors when applying configuration. Rolling back configuration"
        cp $DNSMASQ_APPGATE_BACKUP $DNSMASQ_APPGATE
        cp $DNSMASQ_APPGATE_NEW $DNSMASQ_APPGATE_FAIL
        decho "Configuration that failed:"
        decho "FILE: $DNSMASQ_APPGATE"
        awk '{system("echo \"" $0 "\"")}' $DNSMASQ_APPGATE_FAIL
        exit 1
    }
    # Counter for restart retries in case something goes wrong
    retries=0
    # Flag to know if we have already rollbacked
    rollbacked=0
    res=1
    # dnsmasq can not reload files on SIHGUP so we need to restart it
    pid=$(pgrep dnsmasq)
    if [ -n "$pid" ]; then
        kill -9 "$pid"
    fi
    if [ "${DNSMASQ_DEBUG:-0}" -eq 1 ]; then
        LOG_QUERIES="--log-queries"
    else
        LOG_QUERIES=""
    fi
    while [ $res != 0 ]; do
        decho "Restarting dnsmasq ..."
        /usr/sbin/dnsmasq --pid-file=/sdp-dnsmasq/dnsmasq.pid --port=53 --local-service \
                          -C $DNSMASQ_CONF_FILE --listen-address=127.0.0.1 "$LOG_QUERIES" \
                          -8 /proc/1/fd/1
        res=$?
        if [ $res != 0 ]; then
            if [ $retries -gt 5 ] && [ $rollbacked -eq 0 ]; then
                # We have retry 5 times, rollback dnsmasq config
                decho "Too many attempts to restart service, rolling back"
                cp $DNSMASQ_APPGATE_BACKUP $DNSMASQ_APPGATE
                rm -f $DNSMASQ_APPGATE_NEW
                rollbacked=1
                retries=0
                sleep 5
            elif [ $retries -le 5 ]; then
                retries=$((retries+1))
                # Wait a bit so we dont try like crazy to restart it
                decho "Trying to restart dnsmasq again ...."
                sleep 5
            else
                # We have rollbacked and still not working!
                # Go to the default config
                decho "Unable to restart service, using safe default values"
                echo $KUBE_DNS_FILE > $DNSMASQ_APPGATE_NEW
                sleep 5
            fi
        fi
    done
fi
