#!/usr/bin/env sh

set -e

CERTS_DIR=certs
K8S_DIR=k8s
SDP_NS=sdp-system
DEMO_NS=sdp-demo
K=kubectl
SDP_KNS="kubectl -n $SDP_NS"
DEMO_KNS="kubectl -n $DEMO_NS"
export PASSWORD_STORE_DIR=${PASSWORD_STORE_DIR:-/media/appgate/pass}

# Misc

check_tools() {
    set +e
    _kubectl=$(which kubectl 2> /dev/null)
    _envsubst=$(which envsubst 2> /dev/null)
    set -e
    _errs=0
    if [ -z $_kubectl ]; then
        echo "kubectl is missing, please install it before using this tool"
        _errs=1
    fi
    if [ -z $_envsubst ]; then
        echo "envsubst is missing, please install it before using this tool"
        _errs=1
    fi
    return $_errs
}

## Certificates

CA_CERT_FILE=$CERTS_DIR/sdp-ca.crt
CA_KEY_FILE=$CERTS_DIR/sdp-ca-key.pem
CA_SRL_FILE=certs/sdp-ca.srl
CSR_FILE=$CERTS_DIR/sdp-injector.csr
KEY_FILE=$CERTS_DIR/sdp-injector-key.pem
CERT_FILE=$CERTS_DIR/sdp-injector-crt.pem
CERT_FILES="$CERT_FILE $CSR_FILE $KEY_FILE $CA_CERT_FILE $CA_KEY_FILE $CA_SRL_FILE"

check_certs() {
    for f in $CERT_FILES; do
        if [ ! -f $f ]; then
            return 1
        fi
    done
    return 0
}

delete_certs() {
    for f in $CERT_FILES; do
        rm -f "$f"
    done
}

mk_certs() {
    mkdir -p ${CERTS_DIR}
    if check_certs; then
        echo "Found certificates, to create new ones, please, delete the old ones."
        echo "Old certificates can be deleted with:"
        echo
        echo "  $0 delete-certs"
        exit 1
    fi
    delete_certs
    openssl genrsa -out ${CA_KEY_FILE} 2048
    openssl req -new -x509 -key ${CA_KEY_FILE} -out ${CA_CERT_FILE} \
            -config ${CERTS_DIR}/ca_config.txt
    openssl genrsa -out ${KEY_FILE} 2048
    openssl req -new -key ${KEY_FILE} \
            -out ${CSR_FILE} \
            -config <( cat ${CERTS_DIR}/sdp-injector_config.txt)
    openssl x509 -req -in ${CSR_FILE} \
            -CA ${CA_CERT_FILE} \
            -CAkey ${CA_KEY_FILE} \
            -CAcreateserial \
            -out ${CERT_FILE}
}

## files
JSON_SIDECARS="$K8S_DIR/yaml/sdp-sidecars.json"

delete_yaml() {
    rm -rf k8s/yaml
}

mk_yaml () {
    if ! check_certs; then
        echo "Not found certificates or broken ones, please create new ones."
        echo "To create new ones:"
        echo
        echo "  $0 delete-certs && $0 mk-certs"
        exit 1
    fi
    export CA_BUNDLE=$(cat ${CA_CERT_FILE} | base64 | tr -d '\n')
    export SDP_INJECTOR_KEY=$(cat ${KEY_FILE} | base64 | tr -d '\n')
    export SDP_INJECTOR_CERT=$(cat ${CERT_FILE} | base64 | tr -d '\n')
    DOCKER_REGISTRY=${DOCKER_REGISTRY:-ghcr.io/appgate/sdp-k8s-injector}
    mkdir -p k8s/yaml
    export DOCKER_REGISTRY
    for f in $K8S_DIR/*.json.tmpl; do
        ff=${f%.*}
        fff=${ff#*/}
        envsubst < $f > "k8s/yaml/$fff"
    done
    [[ -f $JSON_SIDECARS ]] || {
        echo "ERROR: sidecars.json was not generated."
        exit 1
    }
    export SDP_SIDECARS=$(cat ${JSON_SIDECARS} | base64 | tr -d '\n')
    for f in $K8S_DIR/*.yaml.tmpl; do
        ff=${f%.*}
        fff=${ff#*/}
        envsubst < $f > "k8s/yaml/$fff"
    done
}

## SDP

uninstall_sdp() {
    echo "Trying to delete previous versions of spd-k8s"
    set +e
    for f in $K8S_DIR/yaml/*.yaml; do
        $SDP_KNS delete -f $f 2> /dev/null
    done
    kubectl delete ns $SDP_NS 2> /dev/null
    set -e
}

install_sdp() {
    if ! check_certs; then
        echo "Not found certificates or broken ones, please create new ones."
        echo "To create new ones:"
        echo
        echo "  $0 delete-certs && $0 mk-certs"
        exit 1
    fi

    if [[ ! -d k8s/yaml ]]; then
        echo "Not found yaml files or broken ones, please create new ones."
        echo "To create new ones:"
        echo
        echo "  $0 delete-yaml && $0 mk-yaml"
        exit 1
    fi

    uninstall_sdp
    kubectl create ns $SDP_NS
    for f in $K8S_DIR/yaml/*.yaml; do
        $SDP_KNS create -f $f
    done
}

install() {
    if ! check_certs; then
        echo "Seems certificates are broken, regenerating them"
        cleanup_certs
        mk_certs
        mk_yaml
    fi
    if [[ ! -d k8s/yaml ]] ; then
        echo "YAML files were not generated correctly, aborting"
        exit 1
    fi
    install_sdp
}

## DEMO

demo_create_yaml() {
    mkdir -p demo/yaml
    cp demo/*.yaml demo/yaml
    for label in apt-access grafana-access full-access; do
        POD_NAME=$label envsubst < demo/demo-deployment.tmpl > demo/yaml/30-$label-demo-deployment.yaml
    done
    for label in none-access; do
        CLIENT_SECRETS=custom-secrets \
                      CLIENT_CONFIG=custom-config \
                      POD_NAME=$label \
                      envsubst < demo/demo-custom-deployment.tmpl > demo/yaml/40-$label-demo-deployment.yaml
    done
    for i in sdp-injector-client-secrets custom-secrets; do
        CLIENT_USERNAME=$(pass show sdp-k8s-demo/username | base64 | tr -d '\n') \
                       NAME=$i \
                       CLIENT_PASSWORD=$(pass show sdp-k8s-demo/password | base64 | tr -d '\n') \
                       CONTROLLER_PROFILE_URL=$(pass show sdp-k8s-demo/controller-profile-url | base64 | tr -d '\n') \
                       SECRETS_NAME=$i \
                       envsubst < demo/client-secrets.tmpl > demo/yaml/10-$i.yaml
    done
}

demo_deploy() {
    set +e
    if kubectl get ns $DEMO_NS 2> /dev/null; then
        set -e
        demo_delete
    fi
    set -e
    rm -f demo/yaml
    demo_create_yaml
    kubectl create ns $DEMO_NS
    kubectl label namespace $DEMO_NS --overwrite sdp-injection=enabled
    for f in demo/yaml/*; do
        set +e
        kubectl -n $DEMO_NS delete -f $f 2> /dev/null
        set -e
        kubectl -n $DEMO_NS create -f $f
    done
}

demo_delete() {
    $DEMO_KNS delete deployments --all 2> /dev/null
    $DEMO_KNS delete service --all 2> /dev/null
    kubectl delete ns $DEMO_NS 2> /dev/null
    rm -rf demo/yaml
}

usage() {
    echo "sdp-k8s-install :: Installs sdp-k8s on kubertenes"
    echo ""
    echo "Usage:"
    echo "  $0 CMD"
    echo
    echo -n "where CMD ::= [install-sdp unisntall-sdp mk-certs delete-certs mk-yaml delete-yaml "
    echo -n "demo-deploy demo-delete]"
    echo
}

CMD=$1

check_tools

case $CMD in
    "install-sdp")
        echo "Installing sdp-k8s"
        install_sdp
        ;;
    "mk-certs")
        echo "Creating new certificates"
        mk_certs
        echo "Certificates created"
        ;;
    "delete-certs")
        echo "Deleting certificates"
        delete_certs
        ;;
    "uninstall-sdp")
        echo "Cleaning up sdp-k8s"
        uninstall_sdp
        ;;
    "mk-yaml")
        echo "Generating YAML files"
        mk_yaml
        ;;
    "delete-yaml")
        echo "Deleting YAML files"
        delete_yaml
        ;;
    "demo-deploy")
        echo "Deploying demo"
        demo_deploy
        ;;
    "demo-delete")
        echo "Deleting demo"
        demo_delete
        ;;
    *)
        usage
        ;;
esac
